{
  "_args": [
    [
      "disect@^1.2.0",
      "/Users/aniwei/Desktop/aniwei/aniwei.proxy/node_modules/tokenizer-array"
    ]
  ],
  "_from": "disect@>=1.2.0 <2.0.0",
  "_id": "disect@1.2.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/disect",
  "_npmUser": {
    "email": "florent.jaby@gmail.com",
    "name": "floby"
  },
  "_npmVersion": "1.2.32",
  "_phantomChildren": {},
  "_requested": {
    "name": "disect",
    "raw": "disect@^1.2.0",
    "rawSpec": "^1.2.0",
    "scope": null,
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/tokenizer-array"
  ],
  "_resolved": "https://registry.npmjs.org/disect/-/disect-1.2.0.tgz",
  "_shasum": "4de4200fc7daab660a2f89dc099b143c0f1c906b",
  "_shrinkwrap": null,
  "_spec": "disect@^1.2.0",
  "_where": "/Users/aniwei/Desktop/aniwei/aniwei.proxy/node_modules/tokenizer-array",
  "author": {
    "email": "florent.jaby@gmail.com",
    "name": "Florent Jaby"
  },
  "bugs": {
    "url": "https://github.com/Floby/node-disect/issues"
  },
  "dependencies": {},
  "description": "Bisection helper for javascript",
  "devDependencies": {
    "nodeunit": "~0.8.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "4de4200fc7daab660a2f89dc099b143c0f1c906b",
    "tarball": "https://registry.npmjs.org/disect/-/disect-1.2.0.tgz"
  },
  "homepage": "https://github.com/Floby/node-disect#readme",
  "keywords": [
    "bisect",
    "bisection",
    "async"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "email": "florent.jaby@gmail.com",
      "name": "floby"
    }
  ],
  "name": "disect",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/Floby/node-disect.png)](https://travis-ci.org/Floby/node-disect)\n\n# node-disect\n\nBisection helper for javascript\n\n## Installation\n\n    npm install --save disect\n\n## Usage\n\nDisect helps you find the first item in a list to satisfy a predicate,\nnothing more.\n\n```javascript\ndisect(0, 100, function (index) {\n  return index >= 56;\n})\n// returns 56\n\n\n// or with an array\ndisect([10, 20, 30], function(element, index) {\n  return element > 11;\n})\n// returns 20;\n\n// if you're into that...\nArray.prototype.disect = function(predicate) {\n  return disect(this, predicate);\n}\n```\n\nIt can also be used in an asynchronous fashion\n\n```javascript\ndisect(0, 100, function (index) {\n  return index >= 56;\n}, function (res) {\n  // res === 56\n})\n\n\n// or with an array\ndisect([10, 20, 30], function(element, index, callback) {\n  process.nextTick(function () {\n    callback(element > 11)\n  })\n}, function (res) {\n  // res === 20\n})\n```\n\n## Reference\n\n#### disect(min, max, predicate)\n\nProcess a bisection on indexes ranging from min to max (max not included) returning the first\nthat satisfies the predicate. This means that all indices superior to the one returned MUST \nvalidate the predicate as well.\nIf no index validates the predicate, then max is returned\n\n* min - Number: the minimum index against which to test\n* max - Number: no indices will be tested that are equal or greater than this\n* predicate - Function(index): A callback to call to test the index. Needless to say,\nthe predicate callback should be stateless\n\n#### disect(array, predicate)\n\nSame as above, except min and max are mapped to 0 and array.length.\nThe predicates' signature differs.\n\n* array - Array: The array containing the elements to iterate on\n* predicate - Function(element, index): A callback to call to test the element of the array at the given index\n\n#### disect(min, max, predicate, callback)\n\nAsync version of the previously mention variant\n\n* min - Number: the minimum index against which to test\n* max - Number: no indices will be tested that are equal or greater than this\n* predicate - Function(index, callback): A callback to call to test the index. The result of the test should\nbe passed to the given callback\n* callback - Function(result): A callback that will be called once the result is found\n\n#### disect(array, predicate, callback)\n\nYou should be able to figure out what this one does\n\n## Possible evolutions\n\n* async predicates -> async result\n* accept iterator instead of range of indices\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2013 Florent Jaby\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.markdown",
  "repository": {
    "type": "git",
    "url": "git://github.com/Floby/node-disect.git"
  },
  "scripts": {
    "test": "nodeunit test/test-*.js"
  },
  "version": "1.2.0"
}
